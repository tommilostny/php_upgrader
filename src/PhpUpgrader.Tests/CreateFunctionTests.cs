using PhpUpgrader.Mona.UpgradeExtensions;

namespace PhpUpgrader.Tests;

public class CreateFunctionTests : UnitTestWithOutputBase
{
    public CreateFunctionTests(ITestOutputHelper output) : base(output)
    {
    }

    [Theory]
    [InlineData("foreach ($files as $file) {\r\n\r\n            self::validateCssFile($file);\r\n\r\n            $fileLocation = self::getAbsoluteLocation($file);\r\n            $content = file_get_contents($fileLocation);\r\n\r\n            // Rewrite css url directives\r\n            // - assumes these are all relative paths\r\n            // - rewrite windows directory separator \\\\ to /\r\n            $baseDirectory = dirname($file);\r\n            $content = preg_replace_callback(\r\n                \"/(url\\(['\\\"]?)([^'\\\")]*)/\",\r\n                create_function(\r\n                    '$matches',\r\n                    \"return \\$matches[1] . str_replace('\\\\\\\\', '/', substr(realpath(PIWIK_DOCUMENT_ROOT . '/$baseDirectory/' . \\$matches[2]), $rootDirectoryLen));\"\r\n                ),\r\n                $content\r\n            );\r\n            $mergedContent = $mergedContent . $content;\r\n        }")]
    [InlineData("static public function isPhpOutputCompressed()\r\n    {\r\n        // Off = ''; On = '1'; otherwise, it's a buffer size\r\n        $zlibOutputCompression = ini_get('zlib.output_compression');\r\n\r\n        // could be ob_gzhandler, ob_deflatehandler, etc\r\n        $outputHandler = ini_get('output_handler');\r\n\r\n        // output handlers can be stacked\r\n        $obHandlers = array_filter(ob_list_handlers(), create_function('$var', 'return $var !== \"default output handler\";'));\r\n\r\n        // user defined handler via wrapper\r\n        $autoPrependFile = ini_get('auto_prepend_file');\r\n        $autoAppendFile = ini_get('auto_append_file');\r\n\r\n        return !empty($zlibOutputCompression) ||\r\n            !empty($outputHandler) ||\r\n            !empty($obHandlers) ||\r\n            !empty($autoPrependFile) ||\r\n            !empty($autoAppendFile);\r\n    }")]
    [InlineData("$fileSpec = array(\r\n                    'delim'            => \"\\t\",\r\n                    'quote'            => '\"', // chr(34)\r\n                    'escape'           => '\\\\\\\\', // chr(92)\r\n                    'escapespecial_cb' => create_function('$str', 'return str_replace(array(chr(92), chr(34)), array(chr(92).chr(92), chr(92).chr(34)), $str);'),\r\n                    'eol'              => \"\\r\\n\",\r\n                    'null'             => 'NULL',\r\n                );")]
    [InlineData("static public function bitwise_eval($expression)\r\n    {\r\n        // replace defined constants\r\n        $buf = get_defined_constants(true);\r\n\r\n        // use only the 'Core' PHP constants, e.g., E_ALL, E_STRICT, ...\r\n        $consts = isset($buf['Core']) ? $buf['Core'] : (isset($buf['mhash']) ? $buf['mhash'] : $buf['internal']);\r\n        $expression = str_replace(' ', '', strtr($expression, $consts));\r\n\r\n        // bitwise operators in order of precedence (highest to lowest)\r\n        // note: boolean ! (NOT) and parentheses aren't handled\r\n        $expression = preg_replace_callback('/~(-?[0-9]+)/', @create_function('$matches', 'return (string)((~(int)$matches[1]));'), $expression);\r\n        $expression = preg_replace_callback('/(-?[0-9]+)&(-?[0-9]+)/', @create_function('$matches', 'return (string)((int)$matches[1]&(int)$matches[2]);'), $expression);\r\n        $expression = preg_replace_callback('/(-?[0-9]+)\\^(-?[0-9]+)/', @create_function('$matches', 'return (string)((int)$matches[1]^(int)$matches[2]);'), $expression);\r\n        $expression = preg_replace_callback('/(-?[0-9]+)\\|(-?[0-9]+)/', @create_function('$matches', 'return (string)((int)$matches[1]|(int)$matches[2]);'), $expression);\r\n\r\n        return (string)((int)$expression & PHP_INT_MAX);\r\n    }")]
    [InlineData("            $sites = Piwik_SitesManager_API::getInstance()->getSitesWithAtLeastViewAccess($count);\r\n            usort($sites, create_function('$site1, $site2', 'return strcasecmp($site1[\"name\"], $site2[\"name\"]);'));\r\n            $this->sites = $sites;\r\n            $this->url = Piwik_Common::sanitizeInputValue(Piwik_Url::getCurrentUrl());\r\n            $this->token_auth = Piwik::getCurrentUserTokenAuth();")]
    [InlineData("        // decode all entities\r\n        $callback = create_function('&$value,$key', 'if(is_string($value)){$value = html_entity_decode($value, ENT_QUOTES, \"UTF-8\");}');\r\n        array_walk_recursive($array, $callback);\r\n\r\n        $str = Piwik_Common::json_encode($array);\r\n\r\n        return $this->jsonpWrap($str);")]
    [InlineData("        // PCLZIP_CB_PRE_EXTRACT callback returns 0 to skip, 1 to resume, or 2 to abort\r\n        return $this->pclzip->extract(\r\n            PCLZIP_OPT_PATH, $pathExtracted,\r\n            PCLZIP_OPT_STOP_ON_ERROR,\r\n            PCLZIP_OPT_REPLACE_NEWER,\r\n            PCLZIP_CB_PRE_EXTRACT, create_function(\r\n                '$p_event, &$p_header',\r\n                \"return strncmp(\\$p_header['filename'], '$pathExtracted', strlen('$pathExtracted')) ? 0 : 1;\"\r\n            )\r\n        );")]
    [InlineData("protected function postDataTableLoadedFromAPI()\r\n    {\r\n        $valid = parent::postDataTableLoadedFromAPI();\r\n        if ($valid === false) return false;\r\n\r\n        foreach ($this->getColumnsToDisplay() as $columnName) {\r\n            if (strpos($columnName, 'conversion_rate')) {\r\n                $this->dataTable->filter('ColumnCallbackReplace', array($columnName, create_function('$rate', 'if($rate==0) return \"0%\"; else return $rate;')));\r\n            }\r\n        }\r\n        $this->columnsToRevenueFilter[] = 'revenue_per_visit';\r\n        foreach ($this->columnsToRevenueFilter as $columnName) {\r\n            $this->dataTable->filter('ColumnCallbackReplace', array($columnName, create_function('$value', 'return sprintf(\"%.1f\",$value);')));\r\n            $this->dataTable->filter('ColumnCallbackReplace', array($columnName, array(\"Piwik\", \"getPrettyMoney\"), array($this->getIdSite())));\r\n        }\r\n\r\n        foreach ($this->columnsToConversionFilter as $columnName) {\r\n            // this ensures that the value is set to zero for all rows where the value was not set (no conversion)\r\n            $this->dataTable->filter('ColumnCallbackReplace', array($columnName, create_function('$value', 'return $value;')));\r\n        }\r\n        return true;\r\n    }")]
    [InlineData("$pmid = preg_replace_callback('/([0-9\\.\\+\\-]*)[\\s]('.$strpiece[1][0].')[\\s]('.$strpiece[2][0].')([\\s]*)/x',\r\n\tcreate_function('$matches', 'global $spacew;\r\n\t$newx = sprintf(\"%.2F\",(floatval($matches[1]) + $spacew));\r\n\treturn \"\".$newx.\" \".$matches[2].\" x*#!#*x\".$matches[3].$matches[4];'), $pmid, 1);\r\nbreak;")]
    public void UpgradesValidFile(string content)
    {
        //Arrange
        var file = new FileWrapper("file.php", content);

        //Act
        file.UpgradeCreateFunction();

        //Assert
        _output.WriteLine(content);
        _output.WriteLine("===========================================================");
        var updated = file.Content.ToString();
        _output.WriteLine(updated);
        Assert.True(file.IsModified);
    }
}
